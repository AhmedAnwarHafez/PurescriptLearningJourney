"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");

// check input string for non-special characters
// and only allow for alpha numeric characters
var requireAlphaNum = function (w) {
    var v = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Char_Unicode.isAlphaNum)(Data_String_CodeUnits.toCharArray(w));
    if (v) {
        return new Data_Maybe.Just(w);
    };
    if (!v) {
        return Data_Maybe.Nothing.value;
    };
    throw new Error("Failed pattern match at Ch3 (line 23, column 5 - line 25, column 25): " + [ v.constructor.name ]);
};
var cleanWhitespace = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v === "") {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        var v1 = Data_Array.uncons(Data_String_CodeUnits.toCharArray(v));
        if (v1 instanceof Data_Maybe.Just) {
            var v2 = Data_Char_Unicode.isSpace(v1.value0.head);
            if (v2) {
                $copy_v = Data_String_CodeUnits.fromCharArray(v1.value0.tail);
                return;
            };
            if (!v2) {
                $tco_done = true;
                return Data_Maybe.Just.create(Data_String_CodeUnits.fromCharArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v1.value0.head ])(v1.value0.tail)));
            };
            throw new Error("Failed pattern match at Ch3 (line 32, column 13 - line 34, column 58): " + [ v2.constructor.name ]);
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Ch3 (line 30, column 5 - line 35, column 20): " + [ v1.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};

// The function returns the password wrapped in 
// a Maybe if only its length is not greater than 
// 20 characters
var checkPasswordLength = function (s) {
    var v = Data_Array.length(Data_String_CodeUnits.toCharArray(s)) > 20;
    if (v) {
        return Data_Maybe.Nothing.value;
    };
    if (!v) {
        return new Data_Maybe.Just(s);
    };
    throw new Error("Failed pattern match at Ch3 (line 15, column 5 - line 17, column 24): " + [ v.constructor.name ]);
};
module.exports = {
    checkPasswordLength: checkPasswordLength,
    requireAlphaNum: requireAlphaNum,
    cleanWhitespace: cleanWhitespace
};
