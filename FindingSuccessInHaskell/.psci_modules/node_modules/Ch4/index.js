"use strict";
var Ch3 = require("../Ch3/index.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");

// Another implementation but this time using the do-block
// the value to the left of the arrow is fed to the next line
// then finally we return the final value using pure (lift it inside the current monad)
var validatePasswordWithDoNotation = function (password) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(Ch3.cleanWhitespace(password))(function (v) {
        return Control_Bind.bind(Data_Maybe.bindMaybe)(Ch3.requireAlphaNum(v))(function (v1) {
            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(v1);
        });
    });
};

// (>>=) :: forall a b m. Bind m => m a -> (a -> m b) -> m b
// This is my attempt to improve password validation using the bind operator before
// reading further in the book 
var validatePasswordWithBind = function (password) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(Ch3.cleanWhitespace(password))(Ch3.requireAlphaNum);
};
var validatePassword$prime = function (password) {
    return Control_Bind.bind(Data_Maybe.bindMaybe)(Control_Bind.bind(Data_Maybe.bindMaybe)(Ch3.cleanWhitespace(password))(Ch3.requireAlphaNum))(Ch3.checkPasswordLength);
};
module.exports = {
    validatePasswordWithBind: validatePasswordWithBind,
    validatePasswordWithDoNotation: validatePasswordWithDoNotation,
    "validatePassword'": validatePassword$prime
};
