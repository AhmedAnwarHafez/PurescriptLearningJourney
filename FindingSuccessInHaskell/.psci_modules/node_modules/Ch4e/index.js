"use strict";
var Data_Maybe = require("../Data.Maybe/index.js");
var Str = (function () {
    function Str(value0) {
        this.value0 = value0;
    };
    Str.create = function (value0) {
        return new Str(value0);
    };
    return Str;
})();
var Val = (function () {
    function Val(value0) {
        this.value0 = value0;
    };
    Val.create = function (value0) {
        return new Val(value0);
    };
    return Val;
})();

// Excercise 12
var bindStringOrValue = function (v) {
    return function (v1) {
        if (v instanceof Str) {
            return new Str(v.value0);
        };
        if (v instanceof Val) {
            return v1(v.value0);
        };
        throw new Error("Failed pattern match at Ch4e (line 18, column 1 - line 21, column 22): " + [ v.constructor.name, v1.constructor.name ]);
    };
};

// Exercise 11:
// If we pretend that the Maybe type has no instance of the Bind typeclass then
// the following implementation will be it
var bindMaybe = function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_Maybe.Just) {
            return v1(v.value0);
        };
        throw new Error("Failed pattern match at Ch4e (line 9, column 1 - line 9, column 62): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
module.exports = {
    bindMaybe: bindMaybe,
    Str: Str,
    Val: Val,
    bindStringOrValue: bindStringOrValue
};
