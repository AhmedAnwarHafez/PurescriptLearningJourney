"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var requireAlphaNum = function (w) {
    var v = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Char_Unicode.isAlphaNum)(Data_String_CodeUnits.toCharArray(w));
    if (v) {
        return new Data_Either.Right(w);
    };
    if (!v) {
        return new Data_Either.Left("Password cannot contain white spaces or specical characters");
    };
    throw new Error("Failed pattern match at Ch5 (line 37, column 5 - line 41, column 1): " + [ v.constructor.name ]);
};
var cleanWhitespace = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v === "") {
            $tco_done = true;
            return new Data_Either.Left("Password cannot be empty");
        };
        var v1 = Data_Array.uncons(Data_String_CodeUnits.toCharArray(v));
        if (v1 instanceof Data_Maybe.Just) {
            var v2 = Data_Char_Unicode.isSpace(v1.value0.head);
            if (v2) {
                $copy_v = Data_String_CodeUnits.fromCharArray(v1.value0.tail);
                return;
            };
            if (!v2) {
                $tco_done = true;
                return Data_Either.Right.create(Data_String_CodeUnits.fromCharArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v1.value0.head ])(v1.value0.tail)));
            };
            throw new Error("Failed pattern match at Ch5 (line 46, column 13 - line 48, column 59): " + [ v2.constructor.name ]);
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return new Data_Either.Left("Password cannot be empty");
        };
        throw new Error("Failed pattern match at Ch5 (line 44, column 5 - line 51, column 1): " + [ v1.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var checkPasswordLength = function (password) {
    var v = Data_Array.length(Data_String_CodeUnits.toCharArray(password)) > 20;
    if (v) {
        return new Data_Either.Left("Password cannot be longer than 20 characters");
    };
    if (!v) {
        return new Data_Either.Right(password);
    };
    throw new Error("Failed pattern match at Ch5 (line 30, column 6 - line 32, column 32): " + [ v.constructor.name ]);
};
var validatePassword = function (password) {
    return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(cleanWhitespace(password))(requireAlphaNum))(checkPasswordLength);
};

// validatePassword :: String -> String
// validatePassword password = 
//     case (cleanWhitespace password) of
//         Nothing -> "Password cannot be empty"
//         Just password2 ->
//             case (requireAlphaNum password2) of
//                 Nothing -> "Password cannot contain white spaces or specical characters"
//                 Just password3 ->
//                     case checkPasswordLength password3 of
//                         Nothing -> "Password length should be between 10 and 20 characters"
//                         Just password4 -> password4
var bindEither = function (v) {
    return function (v1) {
        if (v instanceof Data_Either.Left) {
            return new Data_Either.Left(v.value0);
        };
        if (v instanceof Data_Either.Right) {
            return v1(v.value0);
        };
        throw new Error("Failed pattern match at Ch5 (line 23, column 1 - line 23, column 72): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
module.exports = {
    bindEither: bindEither,
    checkPasswordLength: checkPasswordLength,
    requireAlphaNum: requireAlphaNum,
    cleanWhitespace: cleanWhitespace,
    validatePassword: validatePassword
};
