"use strict";
var Control_Bind = require("../Control.Bind/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Char_Unicode = require("../Data.Char.Unicode/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Username = function (x) {
    return x;
};
var Password = function (x) {
    return x;
};
var $$Error = function (x) {
    return x;
};
var showUsername = new Data_Show.Show(function (v) {
    return "(Username \"" + (v + "\")");
});
var showPassword = new Data_Show.Show(function (v) {
    return "(Password \"" + (v + "\")");
});
var showError = new Data_Show.Show(function (v) {
    return "(Error \"" + (v + "\")");
});
var requireAlphaNum = function (w) {
    var v = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Char_Unicode.isAlphaNum)(Data_String_CodeUnits.toCharArray(w));
    if (v) {
        return new Data_Either.Right(w);
    };
    if (!v) {
        return new Data_Either.Left("Password cannot contain white spaces or specical characters");
    };
    throw new Error("Failed pattern match at Ch6 (line 37, column 5 - line 39, column 92): " + [ v.constructor.name ]);
};
var cleanWhitespace = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v === "") {
            $tco_done = true;
            return new Data_Either.Left("Password cannot be empty");
        };
        var v1 = Data_Array.uncons(Data_String_CodeUnits.toCharArray(v));
        if (v1 instanceof Data_Maybe.Just) {
            var v2 = Data_Char_Unicode.isSpace(v1.value0.head);
            if (v2) {
                $copy_v = Data_String_CodeUnits.fromCharArray(v1.value0.tail);
                return;
            };
            if (!v2) {
                $tco_done = true;
                return Data_Either.Right.create(Data_String_CodeUnits.fromCharArray(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v1.value0.head ])(v1.value0.tail)));
            };
            throw new Error("Failed pattern match at Ch6 (line 46, column 13 - line 48, column 59): " + [ v2.constructor.name ]);
        };
        if (v1 instanceof Data_Maybe.Nothing) {
            $tco_done = true;
            return new Data_Either.Left("Password cannot be empty");
        };
        throw new Error("Failed pattern match at Ch6 (line 44, column 5 - line 49, column 59): " + [ v1.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var checkUsernameLength = function (u) {
    var v = Data_Array.length(Data_String_CodeUnits.toCharArray(u)) > 15;
    if (v) {
        return new Data_Either.Left("Username cannot be longer than 15 character");
    };
    if (!v) {
        return new Data_Either.Right(u);
    };
    throw new Error("Failed pattern match at Ch6 (line 31, column 5 - line 33, column 36): " + [ v.constructor.name ]);
};
var checkPasswordLength = function (password) {
    var v = Data_Array.length(Data_String_CodeUnits.toCharArray(password)) > 20;
    if (v) {
        return new Data_Either.Left("Password cannot be longer than 20 characters");
    };
    if (!v) {
        return new Data_Either.Right(password);
    };
    throw new Error("Failed pattern match at Ch6 (line 25, column 6 - line 27, column 43): " + [ v.constructor.name ]);
};
var validatePassword = function (v) {
    return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(cleanWhitespace(v))(requireAlphaNum))(checkPasswordLength);
};
module.exports = {
    Password: Password,
    "Error": $$Error,
    Username: Username,
    checkPasswordLength: checkPasswordLength,
    checkUsernameLength: checkUsernameLength,
    requireAlphaNum: requireAlphaNum,
    cleanWhitespace: cleanWhitespace,
    validatePassword: validatePassword,
    showPassword: showPassword,
    showError: showError,
    showUsername: showUsername
};
